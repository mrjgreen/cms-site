<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Joe Green</title>
    <link>http://joeg.uk/post/index.xml</link>
    <description>Recent content in Posts on Joe Green</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright> </copyright>
    <lastBuildDate>Sat, 04 Feb 2017 09:03:56 +0000</lastBuildDate>
    <atom:link href="http://joeg.uk/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sign Your Commits with PGP Keys</title>
      <link>http://joeg.uk/2017/02/sign-your-commits-with-pgp-keys/</link>
      <pubDate>Sat, 04 Feb 2017 09:03:56 +0000</pubDate>
      
      <guid>http://joeg.uk/2017/02/sign-your-commits-with-pgp-keys/</guid>
      <description>&lt;p&gt;Did you know that anyone with access to a Git repository can commit code as you, just by changing their git user details?&lt;/p&gt;

&lt;p&gt;Imagine if a disgruntled colleague introduced a critical security vulnerability, or added malicious code under your name&amp;hellip;
how would you be able to prove it wasn&amp;rsquo;t you?
&lt;/p&gt;

&lt;h3 id=&#34;pgp-keys&#34;&gt;PGP Keys&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Pretty Good Privacy&amp;rdquo; (PGP) and the compatible GPL licensed &amp;ldquo;GNU Privacy Guard&amp;rdquo; (GPG) are encryption programs
offering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cryptographic privacy via encryption&lt;/li&gt;
&lt;li&gt;Authentication via signatures (we will be looking at this one today!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use PGP to sign all kinds of data, such as e-mails, documents and pretty much any kind of &amp;ldquo;digital message&amp;rdquo;
you can think of, which under the right circumstances verifies that this data was in fact created by you and has
not been altered since you signed it.&lt;/p&gt;

&lt;p&gt;So how does this help us?&lt;/p&gt;

&lt;h3 id=&#34;signed-commits&#34;&gt;Signed Commits&lt;/h3&gt;

&lt;p&gt;A git commit is nothing more than a &amp;ldquo;digital message&amp;rdquo; and as such it makes sense that we should be able to use our
PGP key to verify that the commit really does belong to us.&lt;/p&gt;

&lt;p&gt;You can even upload the &amp;ldquo;public&amp;rdquo; half of your PGP key to GitHub so that each time you push a signed commit, they will
use the key to verify the signature.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://joeg.uk/images/sign-commits-with-pgp/verified-commit-github.png&#34; alt=&#34;Verified Git Commit&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;generating-your-pgp-key&#34;&gt;Generating Your PGP Key&lt;/h3&gt;

&lt;p&gt;To get started, lets install the GPG program via your package manager. On macOS we will also need to install a program
to manage a secure password prompt for the gpg program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# macOS users:
brew install gpg
brew install pinentry-mac

# Ubuntu users:
apt-get install gnupg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the program installed correctly by running &lt;code&gt;gpg --version&lt;/code&gt; in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --version
gpg (GnuPG) 2.0.30
libgcrypt 1.7.6
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
# etc...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have GPG installed, we can create our PGP key using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be greeted with a prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hit enter to select the default of &amp;ldquo;RSA and RSA&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;What keysize do you want? (2048)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to select the longest value, so type in &amp;ldquo;4096&amp;rdquo; and hit enter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please specify how long the key should be valid.
         0 = key does not expire
      &amp;lt;n&amp;gt;  = key expires in n days
      &amp;lt;n&amp;gt;w = key expires in n weeks
      &amp;lt;n&amp;gt;m = key expires in n months
      &amp;lt;n&amp;gt;y = key expires in n years
Key is valid for? (0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hit enter to select the default of &amp;ldquo;0&amp;rdquo; (key does not expire). This may seem like a bad idea, but in actual fact having
your key expire does little in and of itself to add security here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Key does not expire at all
Is this correct? (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type &amp;ldquo;y&amp;rdquo; and hit enter to confirm.&lt;/p&gt;

&lt;p&gt;Follow the rest of the on-screen instructions, which require you to enter your name and email address.
Be sure to leave the comment blank.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GnuPG needs to construct a user ID to identify your key.

Real name: Joe G
Email address: joe@...
Comment:
You selected this USER-ID:
    &amp;quot;Joe G &amp;lt;joe@...&amp;gt;&amp;quot;

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
You need a Passphrase to protect your secret key.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type &amp;ldquo;O&amp;rdquo; to accept, and then enter a &lt;strong&gt;secure&lt;/strong&gt; passphrase when prompted. In the event of your key being lost, this
passphrase is the only thing protecting your key from being used.&lt;/p&gt;

&lt;p&gt;Now you should be able to list your key by running &lt;code&gt;gpg --list-keys&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --list-keys
/Users/joegreen/.gnupg/pubring.gpg
----------------------------------
pub   4096R/0DA169E9 2017-02-03
uid       [ultimate] Joe G &amp;lt;joe...&amp;gt;
sub   4096R/BC6E7C42 2017-02-03
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-your-key-with-git&#34;&gt;Using Your Key With Git&lt;/h3&gt;

&lt;p&gt;Now you have an active PGP key you will be able to use it to sign your commits.&lt;/p&gt;

&lt;p&gt;In order to allow us to enter our passphrase on macOS we will need to enable the pinentry program we installed earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;pinentry-program /usr/local/bin/pinentry-mac&amp;quot; &amp;gt; ~/.gnupg/gpg-agent.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Provided you have used the same email address in your PGP key identity as you have in your git user config,
your key will automatically be detected when you perform a git commit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;git commit --gpg-sign -m &amp;quot;Commit message here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively you can enable automatic commit signing by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global commit.gpgsign true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;some-considerations&#34;&gt;Some Considerations&lt;/h3&gt;

&lt;h5 id=&#34;signature-omission&#34;&gt;Signature Omission&lt;/h5&gt;

&lt;p&gt;Signed commits only provide evidence that a commit with a valid signature was made by you.
In the case of a commit being made under your name with no signature, your PGP key will go no way at all to proving
it wasn&amp;rsquo;t you.&lt;/p&gt;

&lt;p&gt;For this system of signed commits to work, there must exist a policy to prevent or immediately investigate
any instance of a commit with a missing or invalid signature. This can even be automated using git commit hooks.&lt;/p&gt;

&lt;h5 id=&#34;keep-your-private-key-safe&#34;&gt;Keep Your Private Key Safe&lt;/h5&gt;

&lt;p&gt;PGP signing keys are in fact made up of two parts: a private key allowing you to sign messages and a public key
allowing others to verify your signature is valid.&lt;/p&gt;

&lt;p&gt;As the names suggest, you can (and in fact must) freely distribute your public key, but it is essential that your
private key is never ever revealed.&lt;/p&gt;

&lt;p&gt;The validity of your signatures is only as good as the security of your private key. If your key is compromised, then
anyone can sign messages on your behalf and what&amp;rsquo;s more, the presence of the signature is strong evidence that it really
did originate from you!&lt;/p&gt;

&lt;p&gt;If you lose your private key, you should revoke it immediately using a revocation key which you must store and
keep in a safe place. This is beyond the scope of this post, but I intend to cover PGP keys in more detail in
future posts. In the meantime there plenty of great resources out there already.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Internal Documentation</title>
      <link>http://joeg.uk/2017/01/internal-documentation/</link>
      <pubDate>Sat, 07 Jan 2017 14:33:46 +0000</pubDate>
      
      <guid>http://joeg.uk/2017/01/internal-documentation/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s everyone&amp;rsquo;s least favourite task and universally accepted as a complete waste of time.&lt;/p&gt;

&lt;p&gt;You write something down in the morning and by lunch some inconsiderate developer has deployed
a change that makes your 5 page PDF with attached flow diagram completely obsolete.&lt;/p&gt;

&lt;p&gt;Yep, that does sound like a waste of time.

In fact it&amp;rsquo;s no big revelation to go a step further and say that
this kind of documentation is down right harmful. We know how difficult it is to get our heads
round a project, without being misled by dodgy diagrams. It can also prevent teams
from wanting to improve applications (&amp;ldquo;If I change this, then I&amp;rsquo;ll have to edit those awful docs!&amp;rdquo;).&lt;/p&gt;

&lt;h2 id=&#34;avoiding-documentation&#34;&gt;Avoiding Documentation&lt;/h2&gt;

&lt;p&gt;Where possible, we should do our best to avoid writing documentation.
This might seem like a cop-out, but it&amp;rsquo;s not as easy as just &amp;ldquo;not doing it&amp;rdquo;. We still have to
provide teams with the information they need to run, develop or interact with our systems.&lt;/p&gt;

&lt;p&gt;So how can we avoid it?&lt;/p&gt;

&lt;h3 id=&#34;application-readme&#34;&gt;Application Readme&lt;/h3&gt;

&lt;p&gt;Okay, so this is sort of documentation. But it&amp;rsquo;s simple, easy to find, easy to write and every
git repository should have one. Below are a few suggestions on what to put in your readme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is this?       (Synopsis)&lt;/li&gt;
&lt;li&gt;Why do I need this? (Motivation)&lt;/li&gt;
&lt;li&gt;How do I use it?    (Example)&lt;/li&gt;
&lt;li&gt;How do I run it locally?    (Installation)&lt;/li&gt;
&lt;li&gt;How do I test it?           (Testing)&lt;/li&gt;
&lt;li&gt;Who&amp;rsquo;s responsible for this? (Contributors)&lt;/li&gt;
&lt;li&gt;Where can I find out more?  (Resources)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;automation&#34;&gt;Automation&lt;/h3&gt;

&lt;p&gt;Reducing the number of steps a team member has to take to complete a task reduces the amount of documentation
you need to write in order to support it.&lt;/p&gt;

&lt;p&gt;If you have a section in your readme for &amp;ldquo;Installation&amp;rdquo; and there are 7 commands to run, you should consider
condensing that into a single command.&lt;/p&gt;

&lt;p&gt;A simple way to do this is to include a &lt;code&gt;Makefile&lt;/code&gt; in your application.
&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt; is a tool available by default on most unix platforms.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say your readme suggests the following build process for a PHP application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer install --dev           # Install deps

php install_db.php               # Create the database

php generate_fixtures.php        # Create test data

php -S localhost:8080 server.php # Run a local dev server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could instead create a &lt;code&gt;Makefile&lt;/code&gt; in your project folder containing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;run:
	composer install --dev
	php install_db.php
	php generate_fixtures.php
	php -S localhost:8080 server.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your readme need only ask the developer to run one command to spin up a local development environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So much cleaner!&lt;/p&gt;

&lt;h3 id=&#34;consistency&#34;&gt;Consistency&lt;/h3&gt;

&lt;p&gt;This leads on nicely from the point above. The idea is that teams should be able to work on
any project without needing to re-learn how to build it or how to get its tests to run. Importantly,
you don&amp;rsquo;t have to document the setup for every application individually.&lt;/p&gt;

&lt;p&gt;Github have a requirement that their applications support a common build pattern, which they have
captured in their &amp;ldquo;&lt;a href=&#34;https://github.com/github/scripts-to-rule-them-all&#34;&gt;Scripts to Rule Them All&lt;/a&gt;&amp;ldquo;
project.&lt;/p&gt;

&lt;p&gt;While this is one way to do it, we can keep things simple and just extend our &lt;code&gt;Makefile&lt;/code&gt;.
By requiring all our project Makefiles to support a few common targets, we will have a consistent pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make build   # Pull and build all project dependencies
make run     # Run the project locally (E.g. start a local server)
make test    # Run the application tests
make deploy  # Deploy the app to our server (E.g. SCP, Docker, AWS)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A file for a PHP application may look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build:
	composer install --dev
	php install_db.php
	php generate_fixtures.php

run:
	php -S localhost:8080 server.php

test:
	vendor/bin/phpunit --coverage-html ./coverage ./tests

deploy:
	scp -r dist/ deploy@example.com:/data/www/app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without this file, each of these tasks would require documentation and when the process changes the chances
are good that your documentation would fall out of step. Now, you can freely change your processes and your makefile
will prevent the need to change your docs!&lt;/p&gt;

&lt;h3 id=&#34;open-source&#34;&gt;Open Source&lt;/h3&gt;

&lt;p&gt;I won&amp;rsquo;t speculate as to the psychology behind it, but for whatever reason we can&amp;rsquo;t seem to help ourselves when it
comes to re-inventing the wheel and building custom solutions to problems the community has solved 100 times already.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Yeah, we built our own message queue because&amp;hellip;. blah blah blah&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just stop it. Put the keyboard down and go home.&lt;/p&gt;

&lt;p&gt;Forfeiting the use of community supported, open source solutions means that you are going to have to write documentation
to explain how to install, integrate and operate your custom solution. Or as is more often the case, don&amp;rsquo;t write any
documentation at all and leave it for your colleagues to figure out how it works for themselves.&lt;/p&gt;

&lt;h2 id=&#34;when-you-can-t-avoid-documentation&#34;&gt;When You Can&amp;rsquo;t Avoid Documentation&lt;/h2&gt;

&lt;p&gt;There are scenarios where documentation &lt;em&gt;is&lt;/em&gt; appropriate and should be encouraged.
In these circumstances we should be sure to have policies in place to make documentation as
painless as possible.&lt;/p&gt;

&lt;h3 id=&#34;make-it-easy-and-consistent&#34;&gt;Make it Easy and Consistent&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t have people passing around word documents or PDFs by email. Find a decent cloud documentation
platform like &lt;a href=&#34;https://www.atlassian.com/software/confluence&#34;&gt;confluence&lt;/a&gt; and take some time to set up the
right spaces and hierarchies for your organisation.&lt;/p&gt;

&lt;p&gt;Creating templates for different types of documents will maintain consistency and save time.&lt;/p&gt;

&lt;h3 id=&#34;make-it-clear-what-documentation-is-expected&#34;&gt;Make it Clear What Documentation is Expected&lt;/h3&gt;

&lt;p&gt;Be explicit about what type of documents you expect to be present and hold team members accountable for making sure it&amp;rsquo;s
completed.&lt;/p&gt;

&lt;p&gt;Some ideas for things you may wish to spend time documenting:&lt;/p&gt;

&lt;h5 id=&#34;high-level-architectural-diagrams&#34;&gt;High-level Architectural Diagrams&lt;/h5&gt;

&lt;p&gt;As systems begin to grow it&amp;rsquo;s often impossible for even the longest serving, most experienced
team member to visualise the entire platform architecture.&lt;/p&gt;

&lt;p&gt;Finding a person to be responsible for keeping system diagrams up-to-date can be a challenge.
It requires communication and collaboration with every team in your organisation, so this is
definitely a task for someone who enjoys teamwork.&lt;/p&gt;

&lt;p&gt;Avoiding unnecessary detail here is important, so this could be nothing more than a few labelled boxes with
lines between them. Adding links to code repositories will allow teams to drill in for more information.&lt;/p&gt;

&lt;p&gt;The key to keeping these diagrams relevant is to use them every time you discuss the system. If you find that the system
has changed and the diagram is out of date, you can modify it immediately.&lt;/p&gt;

&lt;h5 id=&#34;proposals-rfcs&#34;&gt;Proposals / RFCs&lt;/h5&gt;

&lt;p&gt;Initiatives that will affect other teams or the whole company will most likely need to be discussed with representatives
from those teams. Writing down your proposal will help to clarify your own thoughts, while allowing people to consider
your ideas ahead of the discussion and share any outcomes with the team.&lt;/p&gt;

&lt;h5 id=&#34;organisational-policies-e-g-app-security-data-retention&#34;&gt;Organisational Policies (E.g. App Security, Data Retention)&lt;/h5&gt;

&lt;p&gt;In my opinion this is probably the most important thing to capture in writing. Lots of organisations have &amp;ldquo;unspoken&amp;rdquo;
policies and best practices, but without a clear document to reference, these practices are likely to mutate and
meander over time. Trying new techniques and developing ideas is an absolute necessity to keep ahead of competition,
but too much unchecked variation can cause serious problems.&lt;/p&gt;

&lt;h5 id=&#34;meeting-agendas-notes-and-action-points&#34;&gt;Meeting Agendas, Notes and Action Points&lt;/h5&gt;

&lt;p&gt;Writing down topics for discussion ahead of meetings can avoid those awful meandering sessions where the point of the
meeting is lost. Formalising action points is a great way to ensure the time spent in meetings isn&amp;rsquo;t wasted.&lt;/p&gt;

&lt;h5 id=&#34;incident-reports&#34;&gt;Incident Reports&lt;/h5&gt;

&lt;p&gt;We all know things go wrong. Some systems have more problems than others, but even with the
best platforms there are unexpected problems that inevitably affect your uptime.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be afraid of these problems. Embrace them and learn from them. Most importantly, track them.
Set up a template in your documentation area requiring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a date&lt;/li&gt;
&lt;li&gt;a summary of the issue&lt;/li&gt;
&lt;li&gt;impact, affected systems&lt;/li&gt;
&lt;li&gt;root cause&lt;/li&gt;
&lt;li&gt;further actions to prevent recurrence &lt;strong&gt;with a responsible person assigned&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An important idea here is to be as open and transparent as possible with your internal teams, and where appropriate
provide a detailed break down of the root cause to your external users.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If there are security concerns there is obviously a need to apply a patch before releasing specific details of the
exploit, but you may wish to provide users with an overview of the impact as soon as possible. Especially where data has
been compromised.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will discuss in the next topic &amp;ldquo;Communication&amp;rdquo; how best to disseminate this kind of information to your teams and
your users.&lt;/p&gt;

&lt;h5 id=&#34;complex-investigations&#34;&gt;Complex Investigations&lt;/h5&gt;

&lt;p&gt;I&amp;rsquo;ve seen teams waste endless hours investigating a long standing &amp;ldquo;known-issue&amp;rdquo;, only to arrive at the same
conclusion they did last time they looked into it&amp;hellip; And the time before that. When you start trying to find the source
of that bottleneck that slows down the system for 20 minutes at 5:30am on the second Tuesday of every month, you won&amp;rsquo;t
know for sure that you are going to be able to get to the bottom of it before a higher priority task comes in.&lt;/p&gt;

&lt;p&gt;It takes just a few minutes to open up a document, paste in that terminal output, upload that log file and add
some notes, but it could save you hours when you come back to the problem now that you and your team don&amp;rsquo;t
have to start from scratch.&lt;/p&gt;

&lt;h3 id=&#34;promote-document-sharing-and-review-during-regular-meetings&#34;&gt;Promote Document Sharing and Review During Regular Meetings&lt;/h3&gt;

&lt;p&gt;Now that we have gone to the pain of writing all this documentation, we need to make sure its used
as a reference for discussion, and regularly updated.&lt;/p&gt;

&lt;p&gt;It sounds like a big undertaking but this may actually be something you are already doing and the only
change we need to make is to add focus to particular meetings where documentation could be used to help
convey information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React</title>
      <link>http://joeg.uk/2017/01/react/</link>
      <pubDate>Wed, 04 Jan 2017 09:05:10 +0000</pubDate>
      
      <guid>http://joeg.uk/2017/01/react/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m using react for the first time.
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ToDo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;taskName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/li&amp;gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;ReactDOM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; 
    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ToDo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ToDo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;taskName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Write blog post about JavaScript&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Seeing these inline templates along with the code seems strangely familiar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-PHP&#34; data-lang=&#34;PHP&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%.4f&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$t2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$production&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;&amp;lt;div style=&amp;quot;border: 1px blue;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;lt;form&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        &amp;lt;input value=&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rasmus Lerdorf would be proud&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node Rage</title>
      <link>http://joeg.uk/2017/01/node-rage/</link>
      <pubDate>Tue, 03 Jan 2017 21:02:31 +0000</pubDate>
      
      <guid>http://joeg.uk/2017/01/node-rage/</guid>
      <description>&lt;p&gt;Front end development has changed. Again. Now we’ve got Angular 2. And React. And you can use ES6. And TypeScript. And ES2015. And ES2016. And ES2017. It seems like a lot, but it’s okay, there’s tooling; you can “just install it with npm”
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install babel-core babel-loader babel-preset-es2015 babel-preset-react --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aaaand 15 minutes later&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://joeg.uk/images/node-rage/npm-terminal.png&#34; alt=&#34;NPM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;I’m still watching this spinning thing, with no idea what the hell is going on.&lt;/p&gt;

&lt;p&gt;Dammit nodejs. You ruin everything. I’m going to make a coffee while I try to calm my incandescent rage.&lt;/p&gt;

&lt;p&gt;I’m back and npm has finally agreed to release the 8 cores it’s been holding hostage for the last 15 minutes while installing the 4 packages I’ve asked for.
Now I can start my project! Like Alice, I dive further in this rabbit hole of chaos and “webpack” my single solitary .jsx project file
(The webpack config file itself is already the size and complexity of a medium sized application. &lt;em&gt;Note to self: refactor config file&lt;/em&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./node_modules/.bin/webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nope.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR in Cannot find module &#39;babel-runtime/helpers/typeof&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great. Another coffee I think.&lt;/p&gt;

&lt;p&gt;Back again. The shaking hasn’t stopped yet, but with caffeine fueled conviction I open google and hunt down my elusive module.&lt;/p&gt;

&lt;p&gt;Ahh, some success! Others have had this error, and provided sound advice:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Reinstall babel-loader”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/babel/babel-loader/issues/39#issuecomment-78185333&#34;&gt;https://github.com/babel/babel-loader/issues/39#issuecomment-78185333&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh god no, not another 15 minutes watching that spinner! I’ll just read further and make sure this is definitely the cause of my issue&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Most likely. npm is really weird most of the time.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/babel/babel-loader/issues/39#issuecomment-78188663&#34;&gt;https://github.com/babel/babel-loader/issues/39#issuecomment-78188663&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, with indisputable facts like that&amp;hellip;&lt;/p&gt;

&lt;p&gt;For good measure, I’ve decided to upgrade my version of node and npm too. Thankfully it’s been a month or so since I’ve been forced to use them, so they’ll be out of date. Probably by about 23 major versions.&lt;/p&gt;

&lt;p&gt;After another npm install and yet another coffee, my index file has been webpacked. Whatever that is. Maybe I’ll take a look in the “transpiled” file it built to see if I can spot my few lines of code.&lt;/p&gt;

&lt;p&gt;I can’t.&lt;/p&gt;

&lt;p&gt;But what I can spot is 21,788 lines of JavaScript, in a file that’s 731Kb. Are you joking!? How am I supposed to deliver that to the users? On a memory stick?&lt;/p&gt;

&lt;p&gt;Anyway, I opened it in my browser and it worked. Brilliant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://joeg.uk/images/node-rage/todo-app-shot.png&#34; alt=&#34;NPM&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a Blog - Part 2</title>
      <link>http://joeg.uk/2016/12/building-a-blog---part-2/</link>
      <pubDate>Fri, 23 Dec 2016 00:02:31 +0000</pubDate>
      
      <guid>http://joeg.uk/2016/12/building-a-blog---part-2/</guid>
      <description>&lt;p&gt;Last time, we discussed setting up a blog using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a static site generator.&lt;/p&gt;

&lt;p&gt;Today, I&amp;rsquo;m going to add to the project with some terraform configuration and a simple
build and deploy process.

&amp;gt; TL;DR - I added terraform files in the &amp;ldquo;resources&amp;rdquo; folder to create an S3 bucket
and a Makefile with a few canned commands for deploying.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t already have them, you&amp;rsquo;ll need the following tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;awscli (&lt;code&gt;brew install awscli&lt;/code&gt; or &lt;code&gt;pip install awscli&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;terraform (&lt;code&gt;brew install terraform&lt;/code&gt; or &lt;a href=&#34;https://www.terraform.io/downloads.html&#34;&gt;download for your platform&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;ll need to configure your credentials for the awscli by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-the-s3-bucket&#34;&gt;Creating the S3 Bucket&lt;/h2&gt;

&lt;p&gt;We could very quickly jump onto our AWS console and create an S3 bucket. A few clicks in the
interface and in seconds we could be up and running.&lt;/p&gt;

&lt;p&gt;Well, that&amp;rsquo;s fine for now, but what if we want to add cloudfront capabilities? Or some DNS
records to route 53? Even with a simple static website, its easy to see how our infrastructure
could expand.&lt;/p&gt;

&lt;p&gt;Using terraform we can store a representation of our infrastructure in code, which will be
used to drive the API commands to build your stack.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a folder to hold our terraform files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir resources/terraform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a file &lt;code&gt;resources/terraform/s3.tf&lt;/code&gt; to hold our S3 Bucket configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;blog&amp;quot; {
  bucket = &amp;quot;joeg.uk&amp;quot;
  acl = &amp;quot;public-read&amp;quot; # Needs to be public for a website

  versioning {
    enabled = true
  }
  
  website {
      index_document = &amp;quot;index.html&amp;quot;
      error_document = &amp;quot;404.html&amp;quot;
  }

  tags {
    Application = &amp;quot;Blog&amp;quot;
    Owner = &amp;quot;Joe Green&amp;quot;
    Provisioner = &amp;quot;Terraform&amp;quot;
    ProvisionerSrc = &amp;quot;github.com/mrjgreen/blog&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; It&amp;rsquo;s important to tag all your resources appropriately to help with identification
and cost breakdowns (E.G. see how much each &amp;ldquo;Application&amp;rdquo; is costing to run).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;applying-your-infrastructure&#34;&gt;Applying your Infrastructure&lt;/h3&gt;

&lt;p&gt;You should now be able to navigate to your terraform directory and run a &amp;ldquo;plan&amp;rdquo;.
A plan is a dry run, and will NOT make any changes to your infrastructure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd resources/terraform
terraform plan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any resource created for AWS will use the terraform AWS provider, which requires a
default region setting. By default, terraform will ask you to provide this on
the terminal whenever you run a command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform plan
provider.aws.region
  The region where AWS operations will take place. Examples
  are us-east-1, us-west-2, etc.

  Default: us-east-1
  Enter a value: eu-west-1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to avoid typing this each time and to ensure all our configuration is held
in our terraform files, we can create a new file &lt;code&gt;resources/terraform/aws.tf&lt;/code&gt; containing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;provider &amp;quot;aws&amp;quot; {
  region = &amp;quot;eu-west-1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run &lt;code&gt;terraform plan&lt;/code&gt; we will not be prompted for a value, and we should see
our new infrastructure component ready to create.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform plan
Refreshing Terraform state in-memory prior to plan...

// snip...

+ aws_s3_bucket.blog
    acceleration_status:      &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    acl:                      &amp;quot;public-read&amp;quot;
    arn:                      &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    bucket:                   &amp;quot;joeg.uk&amp;quot;
    force_destroy:            &amp;quot;false&amp;quot;
    hosted_zone_id:           &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    region:                   &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    request_payer:            &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    tags.%:                   &amp;quot;4&amp;quot;
    tags.Application:         &amp;quot;Blog&amp;quot;
    tags.Owner:               &amp;quot;Joe Green&amp;quot;
    tags.Provisioner:         &amp;quot;Terraform&amp;quot;
    tags.ProvisionerSrc:      &amp;quot;github.com/mrjgreen/blog&amp;quot;
    versioning.#:             &amp;quot;1&amp;quot;
    versioning.0.enabled:     &amp;quot;true&amp;quot;
    versioning.0.mfa_delete:  &amp;quot;false&amp;quot;
    website.#:                &amp;quot;1&amp;quot;
    website.0.error_document: &amp;quot;404.html&amp;quot;
    website.0.index_document: &amp;quot;index.html&amp;quot;
    website_domain:           &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    website_endpoint:         &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;


Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets go ahead and apply that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see pretty much the same output as before, but with the last line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deploying-the-blog&#34;&gt;Deploying the Blog&lt;/h2&gt;

&lt;p&gt;Running &lt;code&gt;hugo&lt;/code&gt; will generate your static site in a folder called &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Deploying should be as easy as copying the contents of &lt;code&gt;public&lt;/code&gt; up to the S3 bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws s3 sync public s3://joeg.uk --delete --acl public-read
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can store this in a &lt;code&gt;Makefile&lt;/code&gt; in the project root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;all:

build:
	rm -fr public/*
	hugo

deploy:
	aws s3 sync public s3://joeg.uk --delete --acl public-read
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will allow us to run simple commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make deploy
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Building a Blog - Part 1</title>
      <link>http://joeg.uk/2016/12/building-a-blog---part-1/</link>
      <pubDate>Tue, 20 Dec 2016 21:02:31 +0000</pubDate>
      
      <guid>http://joeg.uk/2016/12/building-a-blog---part-1/</guid>
      <description>&lt;p&gt;For now the content can wait - first item on the list: &lt;strong&gt;choose a blogging platform&lt;/strong&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR - I settled on &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a static site generator which
allows me to keep the site in version control on github, and deploy to an S3 bucket
managed via terraform.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Before I started looking at solutions, I wanted to write down some simple requirements
so I&amp;rsquo;d know when I found the right one.&lt;/p&gt;

&lt;h4 id=&#34;easy-setup&#34;&gt;Easy Setup&lt;/h4&gt;

&lt;p&gt;I wanted to get writing straight away. I didn&amp;rsquo;t want to have to wade through pages of documentation,
or spend 4 hours working out which database fixtures to apply.&lt;/p&gt;

&lt;h4 id=&#34;low-maintenance&#34;&gt;Low maintenance&lt;/h4&gt;

&lt;p&gt;I spend my working days designing and building robust, HA platforms with complex deployment
pipelines, detailed monitoring/alerting systems and comprehensive back-up routines.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want this blog to be another maintenance task to add to my list.&lt;/p&gt;

&lt;h4 id=&#34;version-controlled&#34;&gt;Version Controlled&lt;/h4&gt;

&lt;p&gt;Everything should be in version control; not just the code, but the infrastructure and content too.&lt;/p&gt;

&lt;h4 id=&#34;markdown-support&#34;&gt;Markdown Support&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;d like to be able to write using markdown, for a few reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;it fast and flexible&lt;/li&gt;
&lt;li&gt;allows me to work offline&lt;/li&gt;
&lt;li&gt;content is portable&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;robust-scalable-and-performant&#34;&gt;Robust, Scalable and &amp;ldquo;Performant&amp;rdquo;&lt;/h4&gt;

&lt;p&gt;While it&amp;rsquo;s unlikely that this blog is going to see any real volume of traffic, it is going to be
a public representation of my work and I&amp;rsquo;d like it to have solid up-time, with low cost.
This means it has to run efficiently on a platform that can scale up if traffic demands it.&lt;/p&gt;

&lt;h2 id=&#34;blogging-platforms-i-considered&#34;&gt;Blogging Platforms I Considered&lt;/h2&gt;

&lt;h3 id=&#34;wordpress&#34;&gt;Wordpress&lt;/h3&gt;

&lt;p&gt;Just kidding.&lt;/p&gt;

&lt;h3 id=&#34;grav-cms&#34;&gt;Grav CMS&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href=&#34;https://getgrav.org/&#34;&gt;https://getgrav.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grav is a &amp;ldquo;flat file CMS&amp;rdquo; written in PHP. I downloaded the Grav system with the admin plugin
and ran it quickly using PHP&amp;rsquo;s builtin web server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;curl -fsSL &lt;span class=&#34;s2&#34;&gt;&amp;quot;https://github.com/getgrav/grav/releases/download/1.1.11/grav-admin.zip&amp;quot;&lt;/span&gt; &amp;gt; grav-admin.zip
unzip grav-admin.zip
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; grav-admin
php -S localhost:8888 system/router.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I really like Grav. The themes and the admin system look great and are very easy to use.
It runs out of the box without any initial configuration and is easy to customise with
loads of nice themes available.&lt;/p&gt;

&lt;p&gt;The system itself seems a bit bulky and complex and diving into the application further,
I found lots of nested YAML files for advanced configuration. Despite not having a database,
there seems to be a lot of moving parts, and it has a deep, complex caching layer, which is built up
at runtime.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clear that this is a very capable system and will offer stacks of functionality, over and
above a blogging platform.&lt;/p&gt;

&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugo is a &amp;ldquo;site generation tool&amp;rdquo; written in Go. It&amp;rsquo;s intended to be similar to Jekyll.&lt;/p&gt;

&lt;p&gt;As a site generation tool, it operates on a directory of flat files, and uses config
files to produce a rich, themed, static HTML website that can be deployed directly.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a single command to install, easy to configure and blisteringly
quick at rendering content. It comes with a built in tool for rendering and displaying
your content locally while you write. It also supports &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt;,
and happily lots of the Grav themes have been ported for Hugo.&lt;/p&gt;

&lt;p&gt;Install on MacOS (for other systems just &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;download the correct release from here&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new site skeleton:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site my-new-site
cd my-new-site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Choose a theme from &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;http://themes.gohugo.io/&lt;/a&gt; and install. E.G.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hyde.git themes/hyde
echo &#39;theme = &amp;quot;hyde&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create your first post:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the local server (and show draft posts with -D):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now view your first post by pointing your browser at &lt;code&gt;http://localhost:1313&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add some &amp;ldquo;lipsum&amp;rdquo; content to your post?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -fsSL &amp;quot;https://baconipsum.com/api/?type=meat-and-filler&amp;amp;paras=2&amp;amp;format=text&amp;quot; &amp;gt;&amp;gt; content/post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With your browser still open, you should see the content magically update
(It&amp;rsquo;s not magic, it&amp;rsquo;s websockets).&lt;/p&gt;

&lt;h2 id=&#34;next-time&#34;&gt;Next Time&lt;/h2&gt;

&lt;p&gt;Next time, we will use terraform to configure an S3 bucket to host the static site
generated from this post.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>